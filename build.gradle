buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'

version = mod_version
group = mod_group
archivesBaseName = "Recipe-Diagrams" + '-' + minecraft_version

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {

    mappings channel: "${channel_mapping}", version: "${version_mapping}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'recipegraphs'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                recipegraphs {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'recipegraphs'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                recipegraphs {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'recipegraphs'

            mods {
                recipegraphs {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'recipegraphs', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                recipegraphs {
                    source sourceSets.main
                }
            }
        }
    }
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {

    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    mavenCentral()

}

configurations {
    library
    implementation.extendsFrom library
}

dependencies {

    minecraft 'net.minecraftforge:forge:1.18.2-40.1.0'
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    library 'org.eclipse.elk:org.eclipse.elk.core:0.8.1'
    library 'org.eclipse.elk:org.eclipse.elk.alg.common:0.8.1'
    library 'org.eclipse.elk:org.eclipse.elk.alg.layered:0.8.1'
    library 'org.eclipse.elk:org.eclipse.elk.graph:0.8.1'
    library 'org.eclipse.elk:org.eclipse.elk.graph.json:0.8.1'
}

mixin {
    add sourceSets.main, "recipegraphs.refmap.json"

    config "recipegraphs.mixins.json"

    debug.export = true
    mixin.hotSwap = true
    mixin.checks.interfaces=true
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "Recipe Diagrams",
                "Specification-Vendor"    : "vfyjxf_",
                "Specification-Version"   : project.version,
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "vfyjxf_",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    configurations.library.each { dep ->
        from(project.zipTree(dep)){
            include 'org/eclipse/elk/**'
            include 'org/eclipse/emf/**'
        }
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
